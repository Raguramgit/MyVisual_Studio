---
AWSTemplateFormatVersion: "2010-09-09"

Description: Auto Scaling group with VPC

Mappings: 
  RegionMap: 
    us-east-1:
      HVM64: ami-0ff8a91507f77f867
      HVMG2: ami-0a584ac55a7631c0c
    us-west-1:
      HVM64: ami-0bdb828fd58c52235
      HVMG2: ami-066ee5fd4a9ef77f1
    eu-west-1:
      HVM64: ami-047bb4163c506cd98
      HVMG2: ami-0a7c483d527806435
    ap-northeast-1:
      HVM64: ami-06cd52961ce9f0d85
      HVMG2: ami-053cdd503598e4a9d
    ap-southeast-1:
      HVM64: ami-08569b978cc4dfa10
      HVMG2: ami-0be9df32ae9f92309

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label: 
          Default: Instances
        Parameters:
          - InstanceType
          - KeyName
      -
        Label:
          Default: Network
        Parameters:
          - SSHLocation
          - VpcCIDR
          - PublicsubnetCIDR
          - PrivatesubnetCIDR

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Already available ec2 instance keypair

  InstanceType:
    Type: String
    Description: New EC2 Instances
    Default: t2.micro
    AllowedValues: 
      - t2.micro
      - t2.small
      - t2.medium 
      - t2.large

  VpcCIDR:
    Default: 10.0.0.0/16
    Description: Please enter the IP range of this VPC
    Type: String
  
  PublicsubnetCIDR:
    Default: 10.0.1.0/24
    Description: Please Enter the value of public subnet
    Type: String

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Cloudformation-VPC

  Publicsubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: !Ref PublicsubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Cloudformation-PublicSubnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Cloudformation-IGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  myLaunchConfig: 
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap
        - RegionMap
        - !Ref AWS::Region
        - HVM64
      SecurityGroups: 
        - !Ref LoadbalancerSecurityGroup
      InstanceType: 
        - !Ref InstanceType
      KeyName:
        - !Ref KeyName
      BlockDeviceMappings: 
        - DeviceName: /dev/sda1
          Ebs: 
            VolumeSize: '8'
            VolumeType: gp3
            DeleteOnTermination: true

  myASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      #LaunchConfigurationName : !Ref myLaunchConfig
      AvailabilityZones:
        - "ap-southeast-1a"
        - "ap-southeast-1b"
      MaxSize: '5'
      MinSize: '1'
      DesiredCapacity: '2'
      InstanceId: !Ref myLaunchConfig
      #LoadBalancerNames: myLoadBalancer

  myLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      VpcId: !Ref VPC
      CrossZone: true
      Listeners:
      - InstancePort: '80'
        LoadBalancerPort: '80'
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '10'
        UnhealthyThreshold: '3'
        Interval: '30'
        Timeout: '5'
      SecurityGroups: 
        - !Ref LoadbalancerSecurityGroup
      Instances: 
        - !Ref myASG
      Subnets:
        - !Ref Publicsubnet

  LoadbalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Load Balance Security Group
  LoadbalancerSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref LoadbalancerSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref LoadbalancerSecurityGroup
